import React, { useMemo, useEffect, useState, useCallback } from 'react';
import Head from 'next/head';
import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';
import { diffWords } from 'diff';

const Text = ({type, isFinal, children}) => {
  useEffect(() => {
    if ('correct' === type && isFinal) {
      console.log('correct', children);
    }
  }, [type, isFinal, children]);

  const classNames = useMemo(() => {
    let classes = ['text'];

    if ('correct' === type) {
      classes.push(type);
    }

    if (isFinal) {
      classes.push(type);
    }

    return classes.join(' ');
  }, [type, isFinal])

  return (
    <span className={classNames}>{children}</span>
  )
}

const Dictaphone = () => {
  const [article, setArticle] = useState(false);
  const {
    transcript,
    finalTranscript,
    listening,
    resetTranscript,
    browserSupportsSpeechRecognition
  } = useSpeechRecognition();

  const generateArticle = useCallback(() => {
    resetTranscript();
    fetch('https://api.quotable.io/random')
      .then(response => response.json())
      .then(data => setArticle(data.content));
  }, [])

  useEffect(generateArticle, []);

  const diff = useMemo(() => {
    if (!article) {
      return [];
    }

    return diffWords(article, transcript, {
      ignoreCase: true,
    });
  }, [article, transcript]);

  if (!browserSupportsSpeechRecognition) {
    return <span>Browser does not support speech recognition.</span>;
  }

  const start = () => {
    SpeechRecognition.startListening({ language: 'en-US', continuous: true })
  }

  if (!article) {
    return <div>Loading...</div>
  }

  console.log('DIFF', diff)

  return (
    <div>
      {
        diff.map((d, i) => {
          const isUnprocessed = diff.map((dt, index) => (dt.removed && index + 1)).filter(Boolean).pop() - 1 === i;
          const type = d.removed ? (isUnprocessed ? 'unprocessed' : 'missed') : 'correct';
          return !d.added && (<Text key={i} isFinal={!!finalTranscript} type={type}>{d.value}</Text>)
        })
      }
      <p>Microphone: {listening ? 'on' : 'off'}</p>
      <button onClick={start}>Start</button>
      <button onClick={SpeechRecognition.stopListening}>Stop</button>
      <button onClick={resetTranscript}>Reset</button>
      <button onClick={generateArticle}>Next</button>
      <p>{transcript}</p>
    </div>
  );
};

export default function Home() {
  const [ready, setReady] = useState(false);

  useEffect(() => setReady(true), []);

  if (!ready) {
    return null;
  }

  return (
    <>
      <Head>
        <title>Nggremeng</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Dictaphone/>
    </>
  )
}
